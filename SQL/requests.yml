# Деактивируем учетную запись пользователя
deactivate_user_line:
    "
    update user_accounts_h set is_actual = 0 where tg_id = %var%
    "

# Возвращаем роль и дату/время последнего входа пользователя
last_event_time:
    "
    select 
            event_id 
         ,  datetime(coalesce(max(report_dt), '2000-01-01')) as report_dt
         ,  tg_id   
         ,  event_name 
    from events_h as eh
    join events_dict as ed on 1=1
        and eh.event_name_id = ed.event_name_id
        and eh.tg_id = %var%
        and ed.event_name = '%var%'
    "

# Изменяем роль пользователя
set_user_and_rights:
    "
    update user_role_h set is_actual = 0 where tg_id = %var%
    ;
    insert into user_role_h
    	(report_dt, is_actual, tg_id, role_id, author_tg_id)
    select 
    		datetime('now', 'localtime') as report_dt
    	,	1 as is_actual
    	,	ua.tg_id
    	,	ur.role_id
    	,	%var% as author_tg_id
    from user_accounts_h as ua
    join user_role_dict as ur on role = '%var%'
    where 1=1
    	and tg_id = %var%
    "


# Проверка прав пользователя при его наличия в БД
check_user_and_rights:
    "
    select
        tg_login
    ,	coalesce(ud.role, 'user') as role
    ,	ua.tg_id
    ,	first_name
    ,	last_name
    ,	phone
    ,	corp_email
    ,	home_email
 	from user_accounts_h as ua 
	left join user_role_h as ur on 1=1
		and ur.tg_id = ua.tg_id
		and ur.is_actual = 1
	left join user_role_dict as ud on 1=1
		and ud.role_id = ur.role_id
	where 1=1
		and ua.tg_id = %var%
		and ua.is_actual = 1
    "

# Проверка наличия события в словаре событий
check_event:
    "
    select event_id
    from events_dict
    where event = '%var%'
    "

# Добавить нового пользователя
add_user_line:
    "            
    insert into
    user_accounts_h
        (report_dt, is_actual, %var%)
    values
        (datetime('now', 'localtime'), 1, %var%)
    "

# Добавить запись в log
add2log:
    "    
    insert into events_h 
        (event_id, report_dt, %var%)
    values 
        (Null, datetime('now', 'localtime'), %var%)
    "

# Проверяем наличие нужных таблиц, если нет, то создаем
create_tables:
    "
    --  drop table if exists user_accounts_h;
    
    create table if not exists user_accounts_h
    (
            report_dt date not null
        ,   is_actual integer not null
        ,   tg_id integer not null
        ,   tg_login text not null
        ,   first_name text null
        ,   last_name text null
        ,   phone text null
        ,   corp_email text null
        ,   home_email text null
    )

    ;
    --  drop table if exists events_dict;
    
    create table if not exists events_dict
    (
    	    event_name_id integer primary key
    	,	event_name text unique not null
    )
    
    ;
    --  drop table if exists events_h;
    
 create table if not exists events_h
    (
	        event_id integer primary key
        ,	report_dt date not null
    	,   tg_id integer not null
		,	tg_login text not null
		,	role text not null 
    	,	event_name_id text not null
		,	comments text null
    )
    ;

    --  drop table if exists user_role_dict;
    
    create table if not exists user_role_dict
    (
    	    role_id integer primary key
    	,	role text unique not null
    )
    
    ;    
    --  drop table if exists user_role_h;
    
    create table if not exists user_role_h
    (
    	    report_dt date not null
    	,	is_actual integer not null
    	,   tg_id integer not null
    	,	role_id integer not null
    	,	author_tg_id integer not null
    )
    "